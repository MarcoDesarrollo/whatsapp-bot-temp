import os
import re
import logging
import unicodedata
import requests
from datetime import datetime, timezone
from datetime import datetime, timedelta
from dotenv import load_dotenv
from flask import Flask, request
from openai import OpenAI
from telegram import Bot
from supabase import create_client, Client
from twilio.rest import Client as TwilioClient

# Cargar variables de entorno
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
JORGE_WHATSAPP = os.getenv("JORGE_WHATSAPP")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
TWILIO_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_NUMBER = os.getenv("TWILIO_WHATSAPP_NUMBER")
FB_VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN")
twilio_client = TwilioClient(TWILIO_SID, TWILIO_AUTH)

# Inicializar servicios
client = OpenAI(api_key=OPENAI_API_KEY)
telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# Estados
conversations = {}
esperando_nss = {}
estado_usuario = {}
ultimo_mensaje = {}

mensaje_conciencia = (
    "üìå *Informaci√≥n importante si cotizas bajo la Ley 97:*\n\n"
    "üî∏ Si no usas tu ahorro tu dinero ser√° utilizado autom√°ticamente para pagar tu pensi√≥n."
    "*¬°NO LO COBRAR√ÅS al final de tu vida laboral!*\n\n"
    "Tu dinero al estar administrado por INFONAVIT, s√≥lo genera un *2% de inter√©s anual*üòûüëéüèª, *mientras que la inflaci√≥n en M√©xico es mayor al 5%*.\n"
    "Por eso es importante tomar acci√≥n ahora. üí°"
)

CONTEXT = """
### IDENTIDAD DEL ASISTENTE
Eres Sof√≠a \ud83e\udd5a, asistente virtual de una consultor√≠a llamada *Gestor√≠a Calificada*, especializada en pensiones, INFONAVIT y seguridad social en M√©xico. Estoy aqu√≠ para orientarte con precisi√≥n y rapidez. ü§ì

### INTRODUCCI√ìN AMABLE (SIEMPRE DEBE SALUDAR)
Al comenzar cualquier conversaci√≥n, usa esta frase (o una versi√≥n natural):

"Hola üëã, soy Sof√≠a. Bienvenido a *Gestor√≠a Calificada*. Soy tu asesora digital especializada en pensiones e INFONAVIT. ¬øEn qu√© aspecto puedo ayudarte hoy?"

Despu√©s del saludo, inicia la precalificaci√≥n sin rodeos.

---

### FLUJO DE CLASIFICACI√ìN AUTOM√ÅTICA
Tu objetivo es precalificar al usuario en m√°ximo dos mensajes. S√© clara, directa y no divagues. 

---

üî∑ **1. Si el usuario cotiza actualmente al IMSS**:
‚ö†Ô∏è No pidas ning√∫n documento.
Simplemente menciona lo siguiente:

> "Perfecto. Si usted cotiza actualmente, puede aplicar a dos opciones:
> ‚Ä¢ *Inversi√≥n a 12 meses*: recuperar hasta el *95% del ahorro INFONAVIT*  
> ‚Ä¢ *Inversi√≥n a 6 meses*: recuperar hasta el *65%*
> Ambas aplican si tiene m√°s de *$150,000* en INFONAVIT.  
> ¬øDesea que iniciemos el proceso?"

---

üïò **2. Si el usuario NO cotiza actualmente al IMSS**:
Haz estas tres preguntas:

- ¬øTiene m√°s de *46 a√±os*?
- ¬øTiene al menos *$100,000* de ahorro en INFONAVIT?
- ¬øCuenta con su estado de cuenta AFORE o comprobante?

üî∏ Si responde *S√ç*:
> "Puede aplicar a *INFONAVIT EXPRESS*: recuperar hasta el *60% en 4 a 6 meses*.  
> Requiere tener m√°s de *46 a√±os*, al menos *$100,000* en INFONAVIT y el estado de cuenta de AFORE o comprobante de saldo.  
> ¬øTiene alguno de estos documentos o acceso a *Mi cuenta Infonavit*?"

üî∏ Si responde *NO*:
> "Entiendo. Para continuar con el tr√°mite es necesario contar con alguno de los siguientes:
> ‚Ä¢ Estado de cuenta AFORE  
> ‚Ä¢ Acceso a 'Mi cuenta Infonavit'  
> ‚Ä¢ Comprobante de saldo del ahorro Infonavit  
> Te sugerimos obtener uno de ellos y cuando lo tengas, estaremos encantados de ayudarte. üòä"

---

üü° **3. Si el usuario no sabe si cotiza actualmente**:
Pide su NSS con tono c√°lido:

> "Para verificar tu situaci√≥n, ¬øpodr√≠as compartirme tu *N√∫mero de Seguro Social (NSS)*?"

---

### RESPUESTA CUANDO COMPARTA NOMBRE Y NSS:
> "Gracias üôå. Ya con tu NSS registrado, uno de nuestros asesores te contactar√° para continuar con el proceso.  
> Por ahora no necesitamos m√°s documentos. ¬°Gracias por tu confianza!"

---

### BLOQUE DE EDUCACI√ìN FINANCIERA (LEY 97)

üí° *Importante si cotizas bajo la Ley 97* (a partir del *1¬∞ de julio de 1997*):

üî∏ Si no usas tu ahorro ni ejerces alg√∫n cr√©dito, ese dinero ser√° usado autom√°ticamente para pagar tu pensi√≥n.  
üî∏ *T√∫ no lo vas a cobrar al final de tu vida laboral*.

üìâ Adem√°s, como est√° administrado por INFONAVIT, solo genera un *2% de inter√©s anual*, pero la inflaci√≥n en M√©xico es mayor al *5%*.

üëâ En t√©rminos reales *est√°s perdiendo dinero*.

Por eso es tan importante informarse y tomar decisiones a tiempo.

---

### REGLAS DE CONVERSACI√ìN

- Siempre responde con cordialidad, cercan√≠a y profesionalismo.
- Usa lenguaje humano, evita sonar como robot.
- No repitas, no recites plantillas.
- No pidas documentos si el usuario *s√≠ cotiza actualmente al IMSS*.
- Valida todo paso a paso. Prioriza ayudar.
- Cierra con preguntas como:
  - "¬øDeseas iniciar?"
  - "¬øTe gustar√≠a que te ayudemos a comenzar?"
"""  

def detectar_nss(texto):
    return re.findall(r'\b\d{11}\b', texto)

def detectar_nombre_y_nss(texto):
    nss = detectar_nss(texto)
    nombre = texto.replace(nss[0], "").strip() if nss else None
    return nombre, nss[0] if nss else None

def guardar_conversacion_si_no_existe(user_id, numero):
    numero_limpio = numero.replace("+", "")
    try:
        existing = supabase.from_("conversation_history")\
            .select("conversation_id")\
            .eq("whatsapp_number", numero_limpio)\
            .limit(1)\
            .execute()
        
        if existing.data and len(existing.data) > 0:
            return existing.data[0]["conversation_id"]
        else:
            nueva = supabase.from_("conversation_history").insert({
                "whatsapp_number": numero_limpio,
                "channel": "whatsapp",
                "user_identifier": user_id,
                "user_id": user_id,
                "status": "bot",
                "is_human": False
            }).execute()
            logging.info(f"üÜï Conversaci√≥n creada: {nueva}")
            return nueva.data[0]["conversation_id"] if nueva.data else None
    except Exception as e:
        logging.error(f"‚ùå Error accediendo a Supabase: {e}")
        return None


def guardar_mensaje_conversacion(conversation_id, mensaje, sender="user", tipo="text"):
    if not conversation_id:
        logging.warning("‚ö†Ô∏è No se proporcion√≥ conversation_id. No se guardar√° el mensaje.")
        return None

    field_name = "user_message" if sender == "user" else "bot_response"
    insert_data = {
        "conversation_id": conversation_id,
        "sender_role": sender,
        "message_type": tipo,
        "start_time": datetime.now(timezone.utc).isoformat(),
        field_name: mensaje
    }

    try:
        nuevo = supabase.from_("interaction_history").insert(insert_data).execute()
        message_id = nuevo.data[0]["id"] if nuevo.data else None
        logging.info(f"üí¨ Mensaje guardado con ID: {message_id}")
        return message_id
    except Exception as e:
        logging.error(f"‚ùå Error guardando mensaje en interaction_history: {e}")
        return None






def notificar_a_jorge(nombre, nss, numero, fecha):
    mensaje = (
        f"üëã Hola Jorge,\nNuevo interesado desde WhatsApp:\n\n"
        f"üìå Nombre: {nombre}\n"
        f"üìÖ NSS: {nss}\n"
        f"üì± WhatsApp: {numero}\n"
        f"‚è∞ Fecha: {fecha}"
    )
    try:
        twilio_client.messages.create(
            from_=TWILIO_WHATSAPP_NUMBER,
            to=JORGE_WHATSAPP,
            body=mensaje
        )
        logging.info("‚úÖ Notificaci√≥n enviada a Jorge")
    except Exception as e:
        logging.error(f"‚ùå Error notificando a Jorge: {e}")




def detectar_cierre_conversacion(texto):
    frases_cierre = [
        "eso es todo", "ser√≠a todo", "muchas gracias", "nada m√°s", 
        "hasta luego", "adi√≥s", "nos vemos", "gracias por ahora", "estamos en contacto"
    ]
    texto_lower = texto.lower()
    return any(frase in texto_lower for frase in frases_cierre)


def generar_analisis_incremental(conversacion):
    try:
        full = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in conversacion])
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": """
                    Eres un analista de marketing digital. Resume en 1 frase el inter√©s del usuario o su intenci√≥n de compra.
                    No repitas, no seas gen√©rico. Ejemplo: "Usuario interesado en recuperar ahorro Infonavit con Ley 97."
                """},
                {"role": "user", "content": full}
            ],
            max_tokens=50,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Error generando an√°lisis incremental: {e}")
        return None


def generar_analisis_final_openai(conversacion):
    try:
        full = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in conversacion])
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": """
                    Eres un analista de marketing digital. Resume esta conversaci√≥n en no m√°s de 300 palabras incluyendo:
                    1. Intereses del usuario
                    2. Reclamos o dudas frecuentes
                    3. Posible intenci√≥n de compra
                    4. Observaciones √∫tiles para ventas
                    5. Tono del mensaje (positivo, negativo, neutral)
                """},
                {"role": "user", "content": full}
            ],
            max_tokens=400,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Error generando an√°lisis final: {e}")
        return None
    
def clasificar_lead(conversacion):
    try:
        texto = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in conversacion])
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": CONTEXT + """

Ahora, clasifica este usuario como: Calificado, Medio o No calificado.

- Calificado: Si dice que s√≠ cotiza al IMSS o no cotiza pero cumple con los requisitos (m√°s de 46 a√±os, ahorro mayor a $100,000 y cuenta con alg√∫n documento o acceso a Mi Cuenta Infonavit). Tambi√©n aplica si ya proporcion√≥ su NSS.

- Medio: Si muestra inter√©s pero falta al menos un requisito (por ejemplo: tiene ahorro pero no tiene documento, o tiene menos de 46 a√±os, o no dio su NSS todav√≠a).

- No calificado: Si no tiene ahorro, no tiene documentos, no cumple con los requisitos m√≠nimos, o no responde claramente.

Responde solo con una palabra: Calificado, Medio o No calificado.
"""},
                {"role": "user", "content": texto}
            ],
            max_tokens=10,
            temperature=0
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Error clasificando lead: {e}")
        return "No calificado"


def actualizar_etapa_conversacion(conversation_id, etapa):
    try:
        supabase.from_("conversation_history").update({
            "etapa_actual": etapa,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }).eq("conversation_id", conversation_id).execute()
        logging.info(f"üîñ Etapa actualizada a '{etapa}' para conversaci√≥n {conversation_id}")
    except Exception as e:
        logging.error(f"‚ùå Error actualizando etapa_actual: {e}")


def actualizar_lead_score(conversation_id, score):
    try:
        supabase.from_("conversation_history").update({
            "lead_score": score,
            "updated_at": datetime.now(timezone.utc).isoformat()
        }).eq("conversation_id", conversation_id).execute()
        logging.info(f"üéØ Lead_score actualizado a '{score}'")
    except Exception as e:
        logging.error(f"‚ùå Error actualizando lead_score: {e}")


def reevaluar_lead_score_dinamico(conversation_id, conversacion, user_id):
    try:
        resultado = supabase.from_("conversation_history")\
            .select("lead_score")\
            .eq("conversation_id", conversation_id)\
            .limit(1)\
            .execute()

        score_actual = resultado.data[0]["lead_score"] if resultado.data else None
        nuevo_score = clasificar_lead(conversacion)

        if nuevo_score and nuevo_score.lower() != (score_actual or "").lower():
            actualizar_lead_score(conversation_id, nuevo_score.lower())
            logging.info(f"üîÑ Lead_score actualizado: {score_actual} ‚Üí {nuevo_score}")

            # Guardar en historial
            try:
                supabase.from_("lead_score_history").insert({
                    "conversation_id": conversation_id,
                    "old_score": score_actual,
                    "new_score": nuevo_score.lower(),
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }).execute()
                logging.info("üìà Historial de lead_score guardado correctamente")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è No se pudo guardar historial de score: {e}")

            # Asegurar que el lead tambi√©n exista en conversation_history
            try:
                existente = supabase.from_("conversation_history")\
                    .select("conversation_id")\
                    .eq("conversation_id", conversation_id)\
                    .limit(1)\
                    .execute()
                
                if not existente.data:
                    supabase.from_("conversation_history").insert({
                        "conversation_id": conversation_id,
                        "lead_score": nuevo_score.lower(),
                        "channel": "whatsapp",
                        "user_id": user_id,
                        "user_identifier": user_id,
                        "status": "bot",
                        "is_human": False,
                        "created_at": datetime.now(timezone.utc).isoformat()
                    }).execute()
                    logging.info("üìù Lead no calificado registrado tambi√©n en conversation_history")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è No se pudo insertar en conversation_history: {e}")

    except Exception as e:
        logging.error(f"‚ùå Error reevaluando lead_score din√°micamente: {e}")


def enviar_bienvenida_con_imagen(sender, conversation_id):
    try:
        twilio_client.messages.create(
            from_=TWILIO_WHATSAPP_NUMBER,
            to=f"whatsapp:{sender}",
            body="Hola üëã, soy Sof√≠a. Bienvenido a *Gestor√≠a Calificada*. Soy tu asesora digital especializada en pensiones e INFONAVIT. ¬øEn qu√© aspecto puedo ayudarte hoy?",
           media_url=["https://i.imgur.com/HeS6Tcr.jpeg"]
        )
        guardar_mensaje_conversacion(
            conversation_id,
            "Mensaje de bienvenida + imagen enviada",
            sender="bot",
            tipo="image"
        )
        logging.info("‚úÖ Imagen de bienvenida enviada correctamente")
    except Exception as e:
        logging.error(f"‚ùå Error enviando imagen de bienvenida: {e}")

def send_messenger_message(sender_id, message):
    PAGE_ACCESS_TOKEN = os.getenv("FB_PAGE_ACCESS_TOKEN")
    url = f"https://graph.facebook.com/v17.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": sender_id},
        "message": {"text": message}
    }
    headers = {"Content-Type": "application/json"}
    try:
        r = requests.post(url, json=payload, headers=headers)
        r.raise_for_status()
        logging.info(f"‚úÖ Respuesta enviada a Messenger: {message}")
    except Exception as e:
        logging.error(f"‚ùå Error al enviar mensaje a Messenger: {e}")


def handle_messenger_message(sender_id, text):
    user_id = f"messenger_{sender_id}"  # prefijo para diferenciar canal
    channel = "messenger"

    # Guardar conversaci√≥n si no existe
    conversation_id = guardar_conversacion_messenger_si_no_existe(user_id, sender_id)

    if conversation_id:
        guardar_mensaje_conversacion(conversation_id, text, sender="user", tipo="text")

    if user_id not in conversations:
        conversations[user_id] = []
    conversations[user_id].append({"role": "user", "content": text})

    messages = [{"role": "system", "content": CONTEXT}] + conversations[user_id][-5:]
    response = client.chat.completions.create(
        model="gpt-4",
        messages=messages,
        temperature=0.6,
        max_tokens=500
    )
    bot_reply = response.choices[0].message.content.strip()

    conversations[user_id].append({"role": "assistant", "content": bot_reply})
    guardar_mensaje_conversacion(conversation_id, bot_reply, sender="bot", tipo="text")

    send_messenger_message(sender_id, bot_reply)

def guardar_conversacion_messenger_si_no_existe(user_id, sender_id):
    try:
        existing = supabase.from_("conversation_history")\
            .select("conversation_id")\
            .eq("messenger_id", sender_id)\
            .limit(1)\
            .execute()

        if existing.data and len(existing.data) > 0:
            return existing.data[0]["conversation_id"]
        else:
            nueva = supabase.from_("conversation_history").insert({
                "messenger_id": sender_id,
                "channel": "messenger",
                "user_identifier": user_id,
                "user_id": user_id,
                "status": "bot",
                "is_human": False,
                "created_at": datetime.now(timezone.utc).isoformat()
            }).execute()
            logging.info(f"üÜï Conversaci√≥n Messenger creada: {nueva}")
            return nueva.data[0]["conversation_id"] if nueva.data else None
    except Exception as e:
        logging.error(f"‚ùå Error accediendo a Supabase (Messenger): {e}")
        return None


@app.route("/whatsapp", methods=['POST'])
def webhook():
    if not request.form:
        logging.warning("‚ö†Ô∏è Payload vac√≠o o no enviado como form-data")
        return "Se esperaba form-data (Twilio)", 400

    try:
        msg = request.form.get("Body", "").strip()
        sender = request.form.get("From", "").replace("whatsapp:", "")
        user_id = sender
        logging.info(f"üì© Mensaje recibido de {sender}: {msg}")

        now = datetime.now()
        if user_id in ultimo_mensaje:
            if now - ultimo_mensaje[user_id] > timedelta(minutes=4):
                conversations[user_id].append({
                    "role": "assistant",
                    "content": "Hola de nuevo üëã, ¬øen qu√© m√°s puedo ayudarte hoy? üòä"
                })
        ultimo_mensaje[user_id] = now

        if user_id not in conversations:
            conversations[user_id] = []
        conversations[user_id].append({"role": "user", "content": msg})

        # ‚úÖ Primero obtenemos conversation_id
        conversation_id = guardar_conversacion_si_no_existe(user_id, sender)

        if len(conversations[user_id]) == 1:
           enviar_bienvenida_con_imagen(sender, conversation_id)
        
        intervencion = supabase.from_("conversation_history")\
          .select("is_human")\
          .eq("conversation_id", conversation_id)\
          .limit(1)\
          .execute()
        
        if intervencion.data and intervencion.data[0]["is_human"]:
            logging.info(f"ü§ñ Intervenci√≥n humana activa. Bot no responder√° (user: {user_id})")
            guardar_mensaje_conversacion(conversation_id, msg, sender="user", tipo="text")
            return "ok (intervenci√≥n activa)", 200
        
        # ‚úÖ Luego guardamos el mensaje del usuario
        message_id = guardar_mensaje_conversacion(conversation_id, msg, sender="user", tipo="text")

        # ‚úÖ Verificar si hay archivo adjunto en el mensaje
        num_media = int(request.form.get("NumMedia", 0))
        msg = request.form.get("Body", "").strip()
        sender = request.form.get("From", "").replace("whatsapp:", "")
        user_id = sender
        logging.info(f"üì© Mensaje recibido de {sender}: {msg or '[archivo adjunto sin texto]'}")

        # ‚è≥ Guardar mensaje de texto si existe
        if msg and not num_media:
            guardar_mensaje_conversacion(conversation_id, msg, sender="user", tipo="text")

        if num_media > 0:
            for i in range(num_media):
                media_url = request.form.get("MediaUrl0")
                media_type = request.form.get("MediaContentType0")

            # Clasificar tipo de mensaje seg√∫n el mime-type
                if media_type.startswith("image/"):
                    tipo_archivo = "image"
                elif media_type.startswith("video/"):
                    tipo_archivo = "video"
                elif media_type == "application/pdf":
                    tipo_archivo = "file"
                else:
                     tipo_archivo = "file"

                try:
                    supabase.from_("interaction_history").insert({
                        "conversation_id": conversation_id,
                        "sender_role": "user",
                        "message_type": tipo_archivo,
                        "file_url": media_url,
                        "file_type": media_type,
                        "start_time": datetime.now(timezone.utc).isoformat()
                    }).execute()

                    logging.info(f"üìé Archivo recibido ({media_type}): {media_url}")
                except Exception as e:
                    logging.error(f"‚ùå Error guardando archivo en interaction_history: {e}")


                                 
        reevaluar_lead_score_dinamico(conversation_id, conversations[user_id], user_id)

        if message_id:
            try:
                single_analysis = generar_analisis_incremental([{"role": "user", "content": msg}])
                if single_analysis:
                    supabase.from_("interaction_history").update({
                         "analysis_result": single_analysis
                    }).eq("id", message_id).execute()
            except Exception as e:
                logging.error(f"‚ùå Error guardando an√°lisis individual en tiempo real: {e}")

        mensaje_normalizado = ''.join(
            c for c in unicodedata.normalize('NFD', msg.lower())
            if unicodedata.category(c) != 'Mn'
        )

        keywords = [
            "donde estan", "donde se ubican", "ubicacion", "direccion", "direccion exacta",
            "domicilio", "visitar", "oficina", "como llegar", "en donde estan", "estan ubicados",
            "me puedes dar la direccion", "mapa", "telefono", "agendar cita", "tienen local",
            "atienden fisicamente", "estan en cdmx", "son presenciales", "puedo ir",
            "donde se encuentran", "en donde se ubican"
        ]

        if any(kw in mensaje_normalizado for kw in keywords):
            mensaje_texto = (
                "üìç Estamos ubicados en *Badianes 103, Residencial Jardines, Lerdo, Durango.*\n\n"
                "üìû Puedes llamarnos al *871 457 2902* para agendar una cita o resolver tus dudas.\n\n"
                "üó∫Ô∏è Tambi√©n puedes vernos en Google Maps:\n"
                "https://www.google.com/maps/place/Badianes+103,+Lerdo,+Dgo.\n\n"
                "Ser√° un gusto atenderte personalmente."
            )
            twilio_client.messages.create(
                from_=TWILIO_WHATSAPP_NUMBER,
                to=f"whatsapp:{sender}",
                body=mensaje_texto
            )
            return "ok", 200
        
        if "formato" in mensaje_normalizado or "plantilla" in mensaje_normalizado:
            twilio_client.messages.create(
                from_=TWILIO_WHATSAPP_NUMBER,
                to=f"whatsapp:{sender}",
                body="Aqu√≠ est√° la plantilla que necesitas:",
                media_url=["https://midominio.com/docs/plantilla-solicitud.pdf"]
            )
            return "ok", 200

        if "ya cotizo" in mensaje_normalizado or "si cotizo" in mensaje_normalizado:
            estado_usuario[user_id] = "cotiza"
            conversations[user_id].append({"role": "user", "content": "Cambio de estado: el usuario ahora s√≠ cotiza"})
            actualizar_etapa_conversacion(conversation_id, "cotiza")


        if esperando_nss.get(user_id):
            nombre, nss = detectar_nombre_y_nss(msg)
            if nss:
                esperando_nss[user_id] = False
                fecha = datetime.now().strftime("%d/%m/%Y %H:%M")
                guardar_mensaje_conversacion(conversation_id, f"NSS recibido: {nss}", sender="user", tipo="nss")

                mensaje_confirm = (
                    "¬°Excelente decisi√≥n! Ya con esta informaci√≥n, uno de nuestros asesores se pondr√° en contacto.\n"
                    "Por ahora no necesitamos m√°s documentos. ¬°Gracias por su confianza!\n\n"
                    "¬øTiene alguna otra pregunta o inquietud que pueda atender en este momento?"
                )
                notificacion = (
                    f"üëã Hola Jorge,\nNuevo interesado desde WhatsApp:\n\n"
                    f"üìå Nombre: {nombre.title() if nombre else 'Desconocido'}\n"
                    f"üìÖ NSS: {nss}\n"
                    f"üì± WhatsApp: {sender}\n"
                    f"‚è∞ Fecha: {fecha}"
                )

                twilio_client.messages.create(
                    from_=TWILIO_WHATSAPP_NUMBER,
                    to=JORGE_WHATSAPP,
                    body=notificacion
                )

                twilio_client.messages.create(
                    from_=TWILIO_WHATSAPP_NUMBER,
                    to=f"whatsapp:{sender}",
                    body=mensaje_confirm
                )

                supabase.from_("conversation_history").update({
                    "has_nss": True,
                    "nss": nss,
                    "status": "listo_para_contactar",
                    "updated_at": datetime.now(timezone.utc).isoformat()
                }).eq("conversation_id", conversation_id).execute()

                actualizar_etapa_conversacion(conversation_id, "nss_confirmado")
                actualizar_lead_score(conversation_id, "calificado")

                lead_score = clasificar_lead(conversations[user_id])
                logging.info(f"üè∑Ô∏è Lead clasificado tras NSS como: {lead_score}")
                actualizar_lead_score(conversation_id, "calificado")

                return "ok", 200
            else:
                error_msg = (
                    "Gracias por compartirlo üôå, pero creo que el n√∫mero no est√° completo.\n\n"
                    "‚ú® El NSS debe tener *exactamente 11 d√≠gitos*. A veces se nos puede ir un n√∫mero o un espacio de m√°s üòâ.\n\n"
                    "¬øPodr√≠as revisarlo y volver a enviarlo por favor?"
                )
                twilio_client.messages.create(
                    from_=TWILIO_WHATSAPP_NUMBER,
                    to=f"whatsapp:{sender}",
                    body=error_msg
                )
                return "ok", 200

        messages = [{"role": "system", "content": CONTEXT}] + conversations[user_id][-5:]
        gpt_response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            temperature=0.6,
            max_tokens=500
        )
        bot_reply = gpt_response.choices[0].message.content.strip()

        if any(frase in bot_reply.lower() for frase in [
            "puede aplicar a", "puede recuperar", "requiere tener m√°s de 46 a√±os"
        ]):
            esperando_nss[user_id] = True
            bot_reply += f"\n\n{mensaje_conciencia}\n\nüëâ Por favor, proporcione su N√∫mero de Seguro Social (NSS)."
            actualizar_etapa_conversacion(conversation_id, "esperando_nss")

            actualizar_lead_score(conversation_id, "medio")


        conversations[user_id].append({"role": "assistant", "content": bot_reply})
        guardar_mensaje_conversacion(conversation_id, bot_reply, sender="bot", tipo="text")

        # üëá An√°lisis por mensaje en tiempo real
        # try:
             #single_analysis = generar_analisis_incremental([{"role": "user", "content": msg}, {"role": "assistant", "content": bot_reply}])
            # if single_analysis:
                # supabase.from_("interaction_history").insert({
                    # "conversation_id": conversation_id,
                    # "sender_role": "bot",
                    # "message_type": "analysis",
                    # "start_time": datetime.now(timezone.utc).isoformat(),
                    # "analysis_result": single_analysis
                 #}).execute()
        # except Exception as e:
             #logging.error(f"‚ùå Error guardando an√°lisis individual en tiempo real: {e}")


        if len(conversations[user_id]) % 4 == 0:
            logging.info(f"üß† Generando an√°lisis corto para {user_id}")
            insight = generar_analisis_incremental(conversations[user_id][-6:])
            if insight:
                supabase.from_("conversation_history").update({
                    "analysis_incremental": insight,
                }).eq("conversation_id", conversation_id).execute()

        if detectar_cierre_conversacion(msg):
            logging.info(f"üõë Frase de cierre detectada. Generando an√°lisis final para {user_id}")
            analisis = generar_analisis_final_openai(conversations[user_id])
            lead_score = clasificar_lead(conversations[user_id])
            logging.info(f"üè∑Ô∏è Lead clasificado como: {lead_score}")

            if analisis:
                supabase.from_("conversation_history").update({
                    "final_analysis": analisis,
                    "status": "finalizado"
                }).eq("conversation_id", conversation_id).execute()

                # Usa funci√≥n centralizada para actualizar lead_score con timestamp
                actualizar_lead_score(conversation_id, lead_score)

            actualizar_etapa_conversacion(conversation_id, "finalizado")
        
                # === üîÅ Reevaluaci√≥n din√°mica de lead_score (√∫ltima validaci√≥n antes de responder) ===
        try:
            resultado = supabase.from_("conversation_history")\
                .select("lead_score")\
                .eq("conversation_id", conversation_id)\
                .limit(1)\
                .execute()

            score_actual = resultado.data[0]["lead_score"] if resultado.data else None
            nuevo_score = clasificar_lead(conversations[user_id])

            if nuevo_score and nuevo_score.lower() != (score_actual or "").lower():
                actualizar_lead_score(conversation_id, nuevo_score.lower())
                logging.info(f"üîÑ Lead_score actualizado: {score_actual} ‚Üí {nuevo_score}")

                # (Opcional) Guardar historial de cambios si decides crear esta tabla
                try:
                    supabase.from_("lead_score_history").insert({
                        "conversation_id": conversation_id,
                        "old_score": score_actual,
                        "new_score": nuevo_score.lower(),
                        "timestamp": datetime.now(timezone.utc).isoformat()
                    }).execute()
                    logging.info("üìà Historial de lead_score guardado correctamente")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è No se pudo guardar historial de score: {e}")
        except Exception as e:
            logging.error(f"‚ùå Error reevaluando lead_score din√°micamente: {e}")
            

        twilio_client.messages.create(
            from_=TWILIO_WHATSAPP_NUMBER,
            to=f"whatsapp:{sender}",
            body=bot_reply
        )
        return "ok", 200

    except Exception as e:
        logging.error(f"‚ùå Error procesando mensaje: {e}")
        return "Lo siento, ocurri√≥ un error. Int√©ntelo de nuevo.", 200
    
@app.route("/messenger", methods=['GET', 'POST'])
def messenger_webhook():
    if request.method == 'GET':
        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")

        if mode == "subscribe" and token == FB_VERIFY_TOKEN:
            logging.info("‚úÖ Verificaci√≥n de webhook Messenger exitosa.")
            return challenge, 200
        else:
            logging.warning(f"‚ùå Verificaci√≥n fallida. Mode: {mode}, Token recibido: {token}")
            return "Forbidden", 403

    if request.method == 'POST':
        try:
            data = request.get_json(force=True)
            logging.info("üì© Evento recibido en webhook Messenger:")
            logging.info(data)  # üîç Esto imprimir√° todo lo que venga del Webhook

            for entry in data.get("entry", []):
                for event in entry.get("messaging", []):
                    sender_id = event["sender"]["id"]
                    message_text = event.get("message", {}).get("text")

                    if message_text:
                        logging.info(f"‚úâÔ∏è Mensaje de {sender_id}: {message_text}")
                        handle_messenger_message(sender_id, message_text)
                    else:
                        logging.info(f"‚ö†Ô∏è Evento sin texto: {event}")
        except Exception as e:
            logging.error(f"‚ùå Error procesando mensaje de Messenger: {e}")

        return "ok", 200




if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)), debug=True)

