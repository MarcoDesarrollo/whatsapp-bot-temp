import os
import re
import logging
import unicodedata
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from flask import Flask, request
from openai import OpenAI
from telegram import Bot

# Cargar variables de entorno
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WHATSAPP_CLOUD_API_TOKEN = os.getenv("WHATSAPP_CLOUD_API_TOKEN")
WHATSAPP_CLOUD_PHONE_ID = os.getenv("WHATSAPP_CLOUD_PHONE_ID")
WHATSAPP_TEMPLATE_NAME = os.getenv("WHATSAPP_TEMPLATE_NAME")
JORGE_WHATSAPP = os.getenv("JORGE_WHATSAPP")
JORGE_CHAT_ID = int(os.getenv("JORGE_CHAT_ID", "6788836691"))

# Inicializar servicios
client = OpenAI(api_key=OPENAI_API_KEY)
telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# Estados
conversations = {}
esperando_nss = {}
estado_usuario = {}
ultimo_mensaje = {}

mensaje_conciencia = (
    "üìå *Informaci√≥n importante si cotizas bajo la Ley 97:*\n\n"
    "üî∏ Si no usas tu ahorro o no ejerces alg√∫n cr√©dito, ese dinero ser√° utilizado autom√°ticamente para pagar tu pensi√≥n.\n"
    "*Es decir, ¬°NO LO COBRAR√ÅS al final de tu vida laboral!*\n\n"
    "üìâ Adem√°s, al estar administrado por INFONAVIT, solo genera un *2% de inter√©s anual*, mientras que la inflaci√≥n en M√©xico es *mayor al 5%*.\n"
    "*En t√©rminos reales, est√°s perdiendo valor a√±o con a√±o.*\n\n"
    "Por eso es importante tomar acci√≥n ahora. üí°"
)

CONTEXT = """
### IDENTIDAD DEL ASISTENTE
Eres Sof√≠a \ud83e\udd5a, asistente virtual de una consultor√≠a llamada *Gestor√≠a C en pensiones*, especializada en pensiones, INFONAVIT y seguridad social en M√©xico. Estoy aqu√≠ para orientarte con precisi√≥n y rapidez. ü§ì

### INTRODUCCI√ìN AMABLE (SIEMPRE DEBE SALUDAR)
Al comenzar cualquier conversaci√≥n, usa esta frase (o una versi√≥n natural):

"Hola üëã, soy Sof√≠a. Bienvenido a *Gestor√≠a C en pensiones*. Soy tu asesora digital especializada en pensiones e INFONAVIT. ¬øEn qu√© aspecto puedo ayudarte hoy?"

Despu√©s del saludo, inicia la precalificaci√≥n sin rodeos.

---

### FLUJO DE CLASIFICACI√ìN AUTOM√ÅTICA
Tu objetivo es precalificar al usuario en m√°ximo dos mensajes. S√© clara, directa y no divagues. 

---

üî∑ **1. Si el usuario cotiza actualmente al IMSS**:
‚ö†Ô∏è No pidas ning√∫n documento.
Simplemente menciona lo siguiente:

> "Perfecto. Si usted cotiza actualmente, puede aplicar a dos opciones:
> ‚Ä¢ *Inversi√≥n a 12 meses*: recuperar hasta el *95% del ahorro INFONAVIT*  
> ‚Ä¢ *Inversi√≥n a 6 meses*: recuperar hasta el *65%*
> Ambas aplican si tiene m√°s de *$150,000* en INFONAVIT.  
> ¬øDesea que iniciemos el proceso?"

---

üïò **2. Si el usuario NO cotiza actualmente al IMSS**:
Haz estas tres preguntas:

- ¬øTiene m√°s de *46 a√±os*?
- ¬øTiene al menos *$100,000* de ahorro en INFONAVIT?
- ¬øCuenta con su estado de cuenta AFORE o comprobante?

üî∏ Si responde *S√ç*:
> "Puede aplicar a *INFONAVIT EXPRESS*: recuperar hasta el *60% en 4 a 6 meses*.  
> Requiere tener m√°s de *46 a√±os*, al menos *$100,000* en INFONAVIT y el estado de cuenta de AFORE o comprobante de saldo.  
> ¬øTiene alguno de estos documentos o acceso a *Mi cuenta Infonavit*?"

üî∏ Si responde *NO*:
> "Entiendo. Para continuar con el tr√°mite es necesario contar con alguno de los siguientes:
> ‚Ä¢ Estado de cuenta AFORE  
> ‚Ä¢ Acceso a 'Mi cuenta Infonavit'  
> ‚Ä¢ Comprobante de saldo del ahorro Infonavit  
> Te sugerimos obtener uno de ellos y cuando lo tengas, estaremos encantados de ayudarte. üòä"

---

üü° **3. Si el usuario no sabe si cotiza actualmente**:
Pide su NSS con tono c√°lido:

> "Para verificar tu situaci√≥n, ¬øpodr√≠as compartirme tu *N√∫mero de Seguro Social (NSS)*?"

---

### RESPUESTA CUANDO COMPARTA NOMBRE Y NSS:
> "Gracias üôå. Ya con tu NSS registrado, uno de nuestros asesores te contactar√° para continuar con el proceso.  
> Por ahora no necesitamos m√°s documentos. ¬°Gracias por tu confianza!"

---

### BLOQUE DE EDUCACI√ìN FINANCIERA (LEY 97)

üí° *Importante si cotizas bajo la Ley 97* (a partir del *1¬∞ de julio de 1997*):

üî∏ Si no usas tu ahorro ni ejerces alg√∫n cr√©dito, ese dinero ser√° usado autom√°ticamente para pagar tu pensi√≥n.  
üî∏ *T√∫ no lo vas a cobrar al final de tu vida laboral*.

üìâ Adem√°s, como est√° administrado por INFONAVIT, solo genera un *2% de inter√©s anual*, pero la inflaci√≥n en M√©xico es mayor al *5%*.

üëâ En t√©rminos reales *est√°s perdiendo dinero*.

Por eso es tan importante informarse y tomar decisiones a tiempo.

---

### REGLAS DE CONVERSACI√ìN

- Siempre responde con cordialidad, cercan√≠a y profesionalismo.
- Usa lenguaje humano, evita sonar como robot.
- No repitas, no recites plantillas.
- No pidas documentos si el usuario *s√≠ cotiza actualmente al IMSS*.
- Valida todo paso a paso. Prioriza ayudar.
- Cierra con preguntas como:
  - "¬øDeseas iniciar?"
  - "¬øTe gustar√≠a que te ayudemos a comenzar?"
"""  # (Aqu√≠ dejas todo tu bloque de contexto tal como ya lo tienes) # Tu bloque completo de contexto GPT (como lo pegaste antes)

def detectar_nss(texto):
    return re.findall(r'\b\d{11}\b', texto)

def detectar_nombre_y_nss(texto):
    nss = detectar_nss(texto)
    nombre = texto.replace(nss[0], "").strip() if nss else None
    return nombre, nss[0] if nss else None

def send_whatsapp_template_message(to, nombre, nss, numero, fecha):
    url = f"https://graph.facebook.com/v19.0/{WHATSAPP_CLOUD_PHONE_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_CLOUD_API_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to.replace("whatsapp:", ""),
        "type": "template",
        "template": {
            "name": WHATSAPP_TEMPLATE_NAME,
            "language": {"code": "es_MX"},
            "components": [{
                "type": "body",
                "parameters": [
                    {"type": "text", "text": nombre or "Desconocido"},
                    {"type": "text", "text": nss},
                    {"type": "text", "text": numero.replace("whatsapp:", "")},
                    {"type": "text", "text": fecha}
                ]
            }]
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    logging.info(f"[Cloud API] Respuesta: {response.status_code} - {response.text}")

@app.route("/whatsapp", methods=["GET"])
def verify_webhook():
    VERIFY_TOKEN = "mi_webhook_token"
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("‚úÖ Webhook verificado correctamente")
        return challenge, 200
    else:
        logging.warning("‚ùå Fall√≥ la verificaci√≥n del webhook")
        return "Token de verificaci√≥n inv√°lido", 403

@app.route("/whatsapp", methods=['POST'])
def webhook():
    data = request.get_json()
    logging.info(f"üì• Payload recibido: {data}")

    try:
        entry = data["entry"][0]
        changes = entry["changes"][0]
        value = changes["value"]
        messages = value.get("messages")

        if not messages:
            return "No hay mensajes", 200

        message = messages[0]
        sender = message["from"]
        msg = message["text"]["body"].strip()
        user_id = sender

        logging.info(f"üì© Mensaje recibido de {sender}: {msg}")

        now = datetime.now()
        if user_id in ultimo_mensaje:
            if now - ultimo_mensaje[user_id] > timedelta(minutes=4):
                conversations[user_id].append({
                    "role": "assistant",
                    "content": "Hola de nuevo üëã, ¬øen qu√© m√°s puedo ayudarte hoy? üòä"
                })
        ultimo_mensaje[user_id] = now

        if user_id not in conversations:
            conversations[user_id] = []
        conversations[user_id].append({"role": "user", "content": msg})

        mensaje_normalizado = ''.join(
            c for c in unicodedata.normalize('NFD', msg.lower())
            if unicodedata.category(c) != 'Mn'
        )

        keywords = [
            "donde estan", "donde se ubican", "ubicacion", "direccion", "direccion exacta",
            "domicilio", "visitar", "oficina", "como llegar", "en donde estan", "estan ubicados",
            "me puedes dar la direccion", "mapa", "telefono", "agendar cita", "tienen local",
            "atienden fisicamente", "estan en cdmx", "son presenciales", "puedo ir",
            "donde se encuentran", "en donde se ubican"
        ]

        if any(kw in mensaje_normalizado for kw in keywords):
            mensaje_texto = (
                "üìç Estamos ubicados en *Badianes 103, Residencial Jardines, Lerdo, Durango.*\n\n"
                "üìû Puedes llamarnos al *871 457 2902* para agendar una cita o resolver tus dudas.\n\n"
                "üó∫Ô∏è Tambi√©n puedes vernos en Google Maps:\n"
                "https://www.google.com/maps/place/Badianes+103,+Lerdo,+Dgo.\n\n"
                "Ser√° un gusto atenderte personalmente."
            )
            try:
                response_api = requests.post(
                    f"https://graph.facebook.com/v19.0/{WHATSAPP_CLOUD_PHONE_ID}/messages",
                    headers={
                        "Authorization": f"Bearer {WHATSAPP_CLOUD_API_TOKEN}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "messaging_product": "whatsapp",
                        "to": sender,
                        "type": "text",
                        "text": {"body": mensaje_texto}
                    }
                )
                logging.info(f"‚úÖ Ubicaci√≥n enviada por Cloud API: {response_api.status_code} - {response_api.text}")
            except Exception as e:
                logging.warning(f"‚ùå No se pudo enviar ubicaci√≥n con Cloud API: {e}")
            return "ok", 200

        if "ya cotizo" in mensaje_normalizado or "si cotizo" in mensaje_normalizado:
            estado_usuario[user_id] = "cotiza"
            conversations[user_id].append({"role": "user", "content": "Cambio de estado: el usuario ahora s√≠ cotiza"})

        if esperando_nss.get(user_id):
            nombre, nss = detectar_nombre_y_nss(msg)
            if nss:
                esperando_nss[user_id] = False
                fecha = datetime.now().strftime("%d/%m/%Y %H:%M")
                mensaje_confirm = (
                    "¬°Excelente decisi√≥n! Ya con esta informaci√≥n, uno de nuestros asesores se pondr√° en contacto.\n"
                    "Por ahora no necesitamos m√°s documentos. ¬°Gracias por su confianza!\n\n"
                    "¬øTiene alguna otra pregunta o inquietud que pueda atender en este momento?"
                )
                notificacion = (
                    f"üëã Hola Jorge,\nNuevo interesado desde WhatsApp:\n\n"
                    f"üìå Nombre: {nombre.title() if nombre else 'Desconocido'}\n"
                    f"üìÖ NSS: {nss}\n"
                    f"üì± WhatsApp: {sender}\n"
                    f"‚è∞ Fecha: {fecha}"
                )
                send_whatsapp_template_message(
                    to=JORGE_WHATSAPP,
                    nombre=nombre.title() if nombre else "Desconocido",
                    nss=nss,
                    numero=sender,
                    fecha=fecha
                )
                telegram_bot.send_message(chat_id=JORGE_CHAT_ID, text=notificacion)

                requests.post(
                    f"https://graph.facebook.com/v19.0/{WHATSAPP_CLOUD_PHONE_ID}/messages",
                    headers={
                        "Authorization": f"Bearer {WHATSAPP_CLOUD_API_TOKEN}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "messaging_product": "whatsapp",
                        "to": sender,
                        "type": "text",
                        "text": {"body": mensaje_confirm}
                    }
                )
                return "ok", 200
            else:
                error_msg = (
                    "Gracias por compartirlo üôå, pero creo que el n√∫mero no est√° completo.\n\n"
                    "‚ú® El NSS debe tener *exactamente 11 d√≠gitos*. A veces se nos puede ir un n√∫mero o un espacio de m√°s üòâ.\n\n"
                    "¬øPodr√≠as revisarlo y volver a enviarlo por favor?"
                )
                requests.post(
                    f"https://graph.facebook.com/v19.0/{WHATSAPP_CLOUD_PHONE_ID}/messages",
                    headers={
                        "Authorization": f"Bearer {WHATSAPP_CLOUD_API_TOKEN}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "messaging_product": "whatsapp",
                        "to": sender,
                        "type": "text",
                        "text": {"body": error_msg}
                    }
                )
                return "ok", 200

        messages = [{"role": "system", "content": CONTEXT}] + conversations[user_id][-5:]
        gpt_response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            temperature=0.6,
            max_tokens=500
        )
        bot_reply = gpt_response.choices[0].message.content.strip()

        if any(frase in bot_reply.lower() for frase in [
            "puede aplicar a", "puede recuperar", "requiere tener m√°s de 46 a√±os"
        ]):
            esperando_nss[user_id] = True
            bot_reply += f"\n\n{mensaje_conciencia}\n\nüëâ Por favor, proporcione su N√∫mero de Seguro Social (NSS)."

        conversations[user_id].append({"role": "assistant", "content": bot_reply})

        response_api = requests.post(
            f"https://graph.facebook.com/v19.0/{WHATSAPP_CLOUD_PHONE_ID}/messages",
            headers={
                "Authorization": f"Bearer {WHATSAPP_CLOUD_API_TOKEN}",
                "Content-Type": "application/json"
            },
            json={
                "messaging_product": "whatsapp",
                "to": sender,
                "type": "text",
                "text": {"body": bot_reply}
            }
        )
        logging.info(f"‚úÖ Respuesta enviada por Cloud API: {response_api.status_code} - {response_api.text}")
        return "ok", 200

    except Exception as e:
        logging.error(f"‚ùå Error procesando mensaje: {e}")
        return "Lo siento, ocurri√≥ un error. Int√©ntelo de nuevo.", 200

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)), debug=True)
